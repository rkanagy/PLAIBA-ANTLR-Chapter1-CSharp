//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BasicEvaluator.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class BasicEvaluatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ADD=1, SUB=2, MUL=3, DIV=4, EQ=5, LT=6, GT=7, PRINT=8, LPAREN=9, RPAREN=10, 
		DEFINE=11, IF=12, WHILE=13, SET=14, BEGIN=15, INTEGER=16, NAME=17, COMMENT=18, 
		WS=19;
	public const int
		RULE_prog = 0, RULE_input = 1, RULE_funDef = 2, RULE_argList = 3, RULE_expression = 4, 
		RULE_value = 5, RULE_function = 6, RULE_variable = 7;
	public static readonly string[] ruleNames = {
		"prog", "input", "funDef", "argList", "expression", "value", "function", 
		"variable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'='", "'<'", "'>'", "'print'", "'('", 
		"')'", "'define'", "'if'", "'while'", "'set'", "'begin'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ADD", "SUB", "MUL", "DIV", "EQ", "LT", "GT", "PRINT", "LPAREN", 
		"RPAREN", "DEFINE", "IF", "WHILE", "SET", "BEGIN", "INTEGER", "NAME", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BasicEvaluator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BasicEvaluatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BasicEvaluatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BasicEvaluatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputContext[] input() {
			return GetRuleContexts<InputContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input(int i) {
			return GetRuleContext<InputContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 16;
				input();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << INTEGER) | (1L << NAME))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
	 
		public InputContext() { }
		public virtual void CopyFrom(InputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunDefInputContext : InputContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunDefContext funDef() {
			return GetRuleContext<FunDefContext>(0);
		}
		public FunDefInputContext(InputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunDefInput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInputContext : InputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionInputContext(InputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 2, RULE_input);
		try {
			State = 23;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new ExpressionInputContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 21;
				expression();
				}
				break;
			case 2:
				_localctx = new FunDefInputContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 22;
				funDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(BasicEvaluatorParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		public FunDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunDefContext funDef() {
		FunDefContext _localctx = new FunDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_funDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			Match(LPAREN);
			State = 26;
			Match(DEFINE);
			State = 27;
			function();
			State = 28;
			argList();
			State = 29;
			expression();
			State = 30;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 6, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(LPAREN);
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME) {
				{
				{
				State = 33;
				variable();
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 39;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VariableExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ValueExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BasicEvaluatorParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		public WhileExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorExprContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BasicEvaluatorParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(BasicEvaluatorParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(BasicEvaluatorParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(BasicEvaluatorParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicEvaluatorParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BasicEvaluatorParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BasicEvaluatorParser.GT, 0); }
		public OperatorExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BasicEvaluatorParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		public IfExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BeginExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BasicEvaluatorParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BeginExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BasicEvaluatorParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		public SetExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BasicEvaluatorParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		public PrintExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_expression);
		int _la;
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new ValueExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 41;
				value();
				}
				break;
			case 2:
				_localctx = new VariableExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 42;
				variable();
				}
				break;
			case 3:
				_localctx = new IfExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 43;
				Match(LPAREN);
				State = 44;
				Match(IF);
				State = 45;
				expression();
				State = 46;
				expression();
				State = 47;
				expression();
				State = 48;
				Match(RPAREN);
				}
				break;
			case 4:
				_localctx = new WhileExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 50;
				Match(LPAREN);
				State = 51;
				Match(WHILE);
				State = 52;
				expression();
				State = 53;
				expression();
				State = 54;
				Match(RPAREN);
				}
				break;
			case 5:
				_localctx = new SetExprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 56;
				Match(LPAREN);
				State = 57;
				Match(SET);
				State = 58;
				variable();
				State = 59;
				expression();
				State = 60;
				Match(RPAREN);
				}
				break;
			case 6:
				_localctx = new BeginExprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 62;
				Match(LPAREN);
				State = 63;
				Match(BEGIN);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 64;
					expression();
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << INTEGER) | (1L << NAME))) != 0) );
				State = 69;
				Match(RPAREN);
				}
				break;
			case 7:
				_localctx = new FunctionExprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 71;
				Match(LPAREN);
				State = 72;
				function();
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << INTEGER) | (1L << NAME))) != 0)) {
					{
					{
					State = 73;
					expression();
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 79;
				Match(RPAREN);
				}
				break;
			case 8:
				_localctx = new OperatorExprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 81;
				Match(LPAREN);
				State = 82;
				((OperatorExprContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << SUB) | (1L << MUL) | (1L << DIV) | (1L << EQ) | (1L << LT) | (1L << GT))) != 0)) ) {
					((OperatorExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 83;
				expression();
				State = 84;
				expression();
				State = 85;
				Match(RPAREN);
				}
				break;
			case 9:
				_localctx = new PrintExprContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 87;
				Match(LPAREN);
				State = 88;
				Match(PRINT);
				State = 89;
				expression();
				State = 90;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicEvaluatorParser.INTEGER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(BasicEvaluatorParser.NAME, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 12, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(BasicEvaluatorParser.NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 14, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', 'g', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x6', '\x2', '\x14', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x15', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x1A', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', '%', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'(', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x6', '\x6', '\x44', '\n', '\x6', '\r', '\x6', 
		'\xE', '\x6', '\x45', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'M', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 'P', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '_', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x2', '\x2', '\n', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', '\x3', '\x3', '\x2', 
		'\x3', '\t', '\x2', 'k', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\"', '\x3', '\x2', '\x2', '\x2', '\n', '^', '\x3', '\x2', 
		'\x2', '\x2', '\f', '`', '\x3', '\x2', '\x2', '\x2', '\xE', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x64', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x14', '\x5', '\x4', '\x3', '\x2', '\x13', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x15', '\x3', '\x2', '\x2', '\x2', '\x15', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x17', '\x1A', '\x5', '\n', '\x6', 
		'\x2', '\x18', '\x1A', '\x5', '\x6', '\x4', '\x2', '\x19', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\v', '\x2', 
		'\x2', '\x1C', '\x1D', '\a', '\r', '\x2', '\x2', '\x1D', '\x1E', '\x5', 
		'\xE', '\b', '\x2', '\x1E', '\x1F', '\x5', '\b', '\x5', '\x2', '\x1F', 
		' ', '\x5', '\n', '\x6', '\x2', ' ', '!', '\a', '\f', '\x2', '\x2', '!', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\"', '&', '\a', '\v', '\x2', '\x2', 
		'#', '%', '\x5', '\x10', '\t', '\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', 
		'%', '(', '\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', ')', '\x3', '\x2', '\x2', 
		'\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '\f', '\x2', 
		'\x2', '*', '\t', '\x3', '\x2', '\x2', '\x2', '+', '_', '\x5', '\f', '\a', 
		'\x2', ',', '_', '\x5', '\x10', '\t', '\x2', '-', '.', '\a', '\v', '\x2', 
		'\x2', '.', '/', '\a', '\xE', '\x2', '\x2', '/', '\x30', '\x5', '\n', 
		'\x6', '\x2', '\x30', '\x31', '\x5', '\n', '\x6', '\x2', '\x31', '\x32', 
		'\x5', '\n', '\x6', '\x2', '\x32', '\x33', '\a', '\f', '\x2', '\x2', '\x33', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', '\v', '\x2', '\x2', 
		'\x35', '\x36', '\a', '\xF', '\x2', '\x2', '\x36', '\x37', '\x5', '\n', 
		'\x6', '\x2', '\x37', '\x38', '\x5', '\n', '\x6', '\x2', '\x38', '\x39', 
		'\a', '\f', '\x2', '\x2', '\x39', '_', '\x3', '\x2', '\x2', '\x2', ':', 
		';', '\a', '\v', '\x2', '\x2', ';', '<', '\a', '\x10', '\x2', '\x2', '<', 
		'=', '\x5', '\x10', '\t', '\x2', '=', '>', '\x5', '\n', '\x6', '\x2', 
		'>', '?', '\a', '\f', '\x2', '\x2', '?', '_', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\a', '\v', '\x2', '\x2', '\x41', '\x43', '\a', '\x11', '\x2', 
		'\x2', '\x42', '\x44', '\x5', '\n', '\x6', '\x2', '\x43', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\f', 
		'\x2', '\x2', 'H', '_', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\v', 
		'\x2', '\x2', 'J', 'N', '\x5', '\xE', '\b', '\x2', 'K', 'M', '\x5', '\n', 
		'\x6', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\a', '\f', '\x2', '\x2', 'R', '_', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'T', '\a', '\v', '\x2', '\x2', 'T', 'U', '\t', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x5', '\n', '\x6', '\x2', 'V', 'W', '\x5', '\n', 
		'\x6', '\x2', 'W', 'X', '\a', '\f', '\x2', '\x2', 'X', '_', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\a', '\v', '\x2', '\x2', 'Z', '[', '\a', '\n', 
		'\x2', '\x2', '[', '\\', '\x5', '\n', '\x6', '\x2', '\\', ']', '\a', '\f', 
		'\x2', '\x2', ']', '_', '\x3', '\x2', '\x2', '\x2', '^', '+', '\x3', '\x2', 
		'\x2', '\x2', '^', ',', '\x3', '\x2', '\x2', '\x2', '^', '-', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x34', '\x3', '\x2', '\x2', '\x2', '^', ':', '\x3', 
		'\x2', '\x2', '\x2', '^', '@', '\x3', '\x2', '\x2', '\x2', '^', 'I', '\x3', 
		'\x2', '\x2', '\x2', '^', 'S', '\x3', '\x2', '\x2', '\x2', '^', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '_', '\v', '\x3', '\x2', '\x2', '\x2', '`', '\x61', 
		'\a', '\x12', '\x2', '\x2', '\x61', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x63', '\a', '\x13', '\x2', '\x2', '\x63', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x65', '\a', '\x13', '\x2', '\x2', '\x65', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x15', '\x19', '&', '\x45', 'N', '^',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
