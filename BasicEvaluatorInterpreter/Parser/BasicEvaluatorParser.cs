//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BasicEvaluator.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BasicEvaluatorInterpreter.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class BasicEvaluatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ADD=1, SUB=2, MUL=3, DIV=4, EQ=5, LT=6, GT=7, PRINT=8, LPAREN=9, RPAREN=10, 
		DEFINE=11, IF=12, WHILE=13, SET=14, BEGIN=15, INTEGER=16, NAME=17, COMMENT=18, 
		WS=19;
	public const int
		RULE_prog = 0, RULE_input = 1, RULE_funDef = 2, RULE_argList = 3, RULE_expression = 4, 
		RULE_operator = 5, RULE_valueOp = 6, RULE_function = 7, RULE_variable = 8, 
		RULE_value = 9;
	public static readonly string[] ruleNames = {
		"prog", "input", "funDef", "argList", "expression", "operator", "valueOp", 
		"function", "variable", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'='", "'<'", "'>'", "'print'", "'('", 
		"')'", "'define'", "'if'", "'while'", "'set'", "'begin'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ADD", "SUB", "MUL", "DIV", "EQ", "LT", "GT", "PRINT", "LPAREN", 
		"RPAREN", "DEFINE", "IF", "WHILE", "SET", "BEGIN", "INTEGER", "NAME", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BasicEvaluator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BasicEvaluatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BasicEvaluatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BasicEvaluatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputContext[] input() {
			return GetRuleContexts<InputContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input(int i) {
			return GetRuleContext<InputContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 20;
				input();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << INTEGER) | (1L << NAME))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
	 
		public InputContext() { }
		public virtual void CopyFrom(InputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunDefInputContext : InputContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunDefContext funDef() {
			return GetRuleContext<FunDefContext>(0);
		}
		public FunDefInputContext(InputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunDefInput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInputContext : InputContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionInputContext(InputContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 2, RULE_input);
		try {
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new ExpressionInputContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 25;
				expression();
				}
				break;
			case 2:
				_localctx = new FunDefInputContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 26;
				funDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(BasicEvaluatorParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		public FunDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunDefContext funDef() {
		FunDefContext _localctx = new FunDefContext(Context, State);
		EnterRule(_localctx, 4, RULE_funDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			Match(LPAREN);
			State = 30;
			Match(DEFINE);
			State = 31;
			function();
			State = 32;
			argList();
			State = 33;
			expression();
			State = 34;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 6, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(LPAREN);
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NAME) {
				{
				{
				State = 37;
				variable();
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 43;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VariableExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ValueExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BasicEvaluatorParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		public WhileExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OperatorExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BasicEvaluatorParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		public IfExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BeginExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BasicEvaluatorParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BeginExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BasicEvaluatorParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BasicEvaluatorParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BasicEvaluatorParser.RPAREN, 0); }
		public SetExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_expression);
		int _la;
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new ValueExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				value();
				}
				break;
			case 2:
				_localctx = new VariableExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				variable();
				}
				break;
			case 3:
				_localctx = new IfExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 47;
				Match(LPAREN);
				State = 48;
				Match(IF);
				State = 49;
				expression();
				State = 50;
				expression();
				State = 51;
				expression();
				State = 52;
				Match(RPAREN);
				}
				break;
			case 4:
				_localctx = new WhileExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 54;
				Match(LPAREN);
				State = 55;
				Match(WHILE);
				State = 56;
				expression();
				State = 57;
				expression();
				State = 58;
				Match(RPAREN);
				}
				break;
			case 5:
				_localctx = new SetExprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 60;
				Match(LPAREN);
				State = 61;
				Match(SET);
				State = 62;
				variable();
				State = 63;
				expression();
				State = 64;
				Match(RPAREN);
				}
				break;
			case 6:
				_localctx = new BeginExprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 66;
				Match(LPAREN);
				State = 67;
				Match(BEGIN);
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 68;
					expression();
					}
					}
					State = 71;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << INTEGER) | (1L << NAME))) != 0) );
				State = 73;
				Match(RPAREN);
				}
				break;
			case 7:
				_localctx = new OperatorExprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 75;
				Match(LPAREN);
				State = 76;
				@operator();
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << INTEGER) | (1L << NAME))) != 0)) {
					{
					{
					State = 77;
					expression();
					}
					}
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 83;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
	 
		public OperatorContext() { }
		public virtual void CopyFrom(OperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueOpExprContext : OperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueOpContext valueOp() {
			return GetRuleContext<ValueOpContext>(0);
		}
		public ValueOpExprContext(OperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueOpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExprContext : OperatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionExprContext(OperatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_operator);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				_localctx = new FunctionExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				function();
				}
				break;
			case ADD:
			case SUB:
			case MUL:
			case DIV:
			case EQ:
			case LT:
			case GT:
			case PRINT:
				_localctx = new ValueOpExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				valueOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BasicEvaluatorParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(BasicEvaluatorParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(BasicEvaluatorParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(BasicEvaluatorParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BasicEvaluatorParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BasicEvaluatorParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BasicEvaluatorParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(BasicEvaluatorParser.PRINT, 0); }
		public ValueOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueOpContext valueOp() {
		ValueOpContext _localctx = new ValueOpContext(Context, State);
		EnterRule(_localctx, 12, RULE_valueOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << SUB) | (1L << MUL) | (1L << DIV) | (1L << EQ) | (1L << LT) | (1L << GT) | (1L << PRINT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(BasicEvaluatorParser.NAME, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(BasicEvaluatorParser.NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BasicEvaluatorParser.INTEGER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicEvaluatorVisitor<TResult> typedVisitor = visitor as IBasicEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', '\x66', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x6', '\x2', '\x18', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\x19', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1E', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', ')', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', ',', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x6', '\x6', 'H', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 'I', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'Q', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'T', '\v', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'X', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\\', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x2', '\x3', '\x3', '\x2', '\x3', '\n', 
		'\x2', 'g', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\b', '&', '\x3', '\x2', '\x2', '\x2', '\n', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\f', '[', '\x3', '\x2', '\x2', '\x2', '\xE', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '_', '\x3', '\x2', '\x2', '\x2', '\x12', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x18', '\x5', '\x4', '\x3', '\x2', '\x17', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1E', '\x5', '\n', 
		'\x6', '\x2', '\x1C', '\x1E', '\x5', '\x6', '\x4', '\x2', '\x1D', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\v', '\x2', 
		'\x2', ' ', '!', '\a', '\r', '\x2', '\x2', '!', '\"', '\x5', '\x10', '\t', 
		'\x2', '\"', '#', '\x5', '\b', '\x5', '\x2', '#', '$', '\x5', '\n', '\x6', 
		'\x2', '$', '%', '\a', '\f', '\x2', '\x2', '%', '\a', '\x3', '\x2', '\x2', 
		'\x2', '&', '*', '\a', '\v', '\x2', '\x2', '\'', ')', '\x5', '\x12', '\n', 
		'\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', ')', ',', '\x3', '\x2', 
		'\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', 
		'\x2', '\x2', '+', '-', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\a', '\f', '\x2', '\x2', '.', '\t', '\x3', '\x2', 
		'\x2', '\x2', '/', 'X', '\x5', '\x14', '\v', '\x2', '\x30', 'X', '\x5', 
		'\x12', '\n', '\x2', '\x31', '\x32', '\a', '\v', '\x2', '\x2', '\x32', 
		'\x33', '\a', '\xE', '\x2', '\x2', '\x33', '\x34', '\x5', '\n', '\x6', 
		'\x2', '\x34', '\x35', '\x5', '\n', '\x6', '\x2', '\x35', '\x36', '\x5', 
		'\n', '\x6', '\x2', '\x36', '\x37', '\a', '\f', '\x2', '\x2', '\x37', 
		'X', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\v', '\x2', '\x2', 
		'\x39', ':', '\a', '\xF', '\x2', '\x2', ':', ';', '\x5', '\n', '\x6', 
		'\x2', ';', '<', '\x5', '\n', '\x6', '\x2', '<', '=', '\a', '\f', '\x2', 
		'\x2', '=', 'X', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\v', '\x2', 
		'\x2', '?', '@', '\a', '\x10', '\x2', '\x2', '@', '\x41', '\x5', '\x12', 
		'\n', '\x2', '\x41', '\x42', '\x5', '\n', '\x6', '\x2', '\x42', '\x43', 
		'\a', '\f', '\x2', '\x2', '\x43', 'X', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\a', '\v', '\x2', '\x2', '\x45', 'G', '\a', '\x11', '\x2', '\x2', 
		'\x46', 'H', '\x5', '\n', '\x6', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\a', '\f', '\x2', '\x2', 'L', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\a', '\v', '\x2', '\x2', 'N', 'R', '\x5', '\f', '\a', 
		'\x2', 'O', 'Q', '\x5', '\n', '\x6', '\x2', 'P', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'T', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\f', '\x2', 
		'\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', '/', '\x3', '\x2', '\x2', 
		'\x2', 'W', '\x30', '\x3', '\x2', '\x2', '\x2', 'W', '\x31', '\x3', '\x2', 
		'\x2', '\x2', 'W', '\x38', '\x3', '\x2', '\x2', '\x2', 'W', '>', '\x3', 
		'\x2', '\x2', '\x2', 'W', '\x44', '\x3', '\x2', '\x2', '\x2', 'W', 'M', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\v', '\x3', '\x2', '\x2', '\x2', 'Y', 
		'\\', '\x5', '\x10', '\t', '\x2', 'Z', '\\', '\x5', '\xE', '\b', '\x2', 
		'[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\r', '\x3', '\x2', '\x2', '\x2', ']', '^', '\t', '\x2', '\x2', 
		'\x2', '^', '\xF', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\x13', 
		'\x2', '\x2', '`', '\x11', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', 
		'\a', '\x13', '\x2', '\x2', '\x62', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x64', '\a', '\x12', '\x2', '\x2', '\x64', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\x19', '\x1D', '*', 'I', 'R', 'W', '[',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BasicEvaluatorInterpreter.Parser
