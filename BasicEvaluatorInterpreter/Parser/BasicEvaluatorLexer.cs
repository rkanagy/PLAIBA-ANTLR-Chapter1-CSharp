//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BasicEvaluator.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BasicEvaluatorInterpreter.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class BasicEvaluatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ADD=1, SUB=2, MUL=3, DIV=4, EQ=5, LT=6, GT=7, PRINT=8, LPAREN=9, RPAREN=10, 
		DEFINE=11, IF=12, WHILE=13, SET=14, BEGIN=15, INTEGER=16, NAME=17, COMMENT=18, 
		WS=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ADD", "SUB", "MUL", "DIV", "EQ", "LT", "GT", "PRINT", "LPAREN", "RPAREN", 
		"DEFINE", "IF", "WHILE", "SET", "BEGIN", "INTEGER", "NAME", "COMMENT", 
		"WS"
	};


	public BasicEvaluatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BasicEvaluatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'='", "'<'", "'>'", "'print'", "'('", 
		"')'", "'define'", "'if'", "'while'", "'set'", "'begin'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ADD", "SUB", "MUL", "DIV", "EQ", "LT", "GT", "PRINT", "LPAREN", 
		"RPAREN", "DEFINE", "IF", "WHILE", "SET", "BEGIN", "INTEGER", "NAME", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BasicEvaluator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BasicEvaluatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x15', 'x', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x5', '\x11', ']', '\n', '\x11', '\x3', '\x11', '\x6', 
		'\x11', '`', '\n', '\x11', '\r', '\x11', '\xE', '\x11', '\x61', '\x3', 
		'\x12', '\x6', '\x12', '\x65', '\n', '\x12', '\r', '\x12', '\xE', '\x12', 
		'\x66', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', 'k', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', 'n', '\v', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x6', '\x14', 's', '\n', '\x14', '\r', '\x14', 
		'\xE', '\x14', 't', '\x3', '\x14', '\x3', '\x14', '\x2', '\x2', '\x15', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', 
		'\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', 
		'#', '\x13', '%', '\x14', '\'', '\x15', '\x3', '\x2', '\a', '\x3', '\x2', 
		'/', '/', '\x3', '\x2', '\x32', ';', '\a', '\x2', '\v', '\f', '\xF', '\xF', 
		'\"', '\"', '*', '+', '=', '=', '\x4', '\x2', '\f', '\f', '\xF', '\xF', 
		'\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', '|', '\x2', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x3', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '+', '\x3', '\x2', '\x2', '\x2', '\a', 
		'-', '\x3', '\x2', '\x2', '\x2', '\t', '/', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\x31', '\x3', '\x2', '\x2', '\x2', '\r', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x35', '\x3', '\x2', '\x2', '\x2', '\x11', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '=', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x17', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x19', 'H', '\x3', '\x2', '\x2', '\x2', '\x1B', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1F', 'U', '\x3', 
		'\x2', '\x2', '\x2', '!', '\\', '\x3', '\x2', '\x2', '\x2', '#', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '%', 'h', '\x3', '\x2', '\x2', '\x2', '\'', 
		'r', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '-', '\x2', '\x2', '*', 
		'\x4', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '/', '\x2', '\x2', 
		',', '\x6', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', ',', '\x2', '\x2', 
		'.', '\b', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\x31', '\x2', 
		'\x2', '\x30', '\n', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', 
		'?', '\x2', '\x2', '\x32', '\f', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', 
		'\a', '>', '\x2', '\x2', '\x34', '\xE', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\a', '@', '\x2', '\x2', '\x36', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\a', 'r', '\x2', '\x2', '\x38', '\x39', '\a', 
		't', '\x2', '\x2', '\x39', ':', '\a', 'k', '\x2', '\x2', ':', ';', '\a', 
		'p', '\x2', '\x2', ';', '<', '\a', 'v', '\x2', '\x2', '<', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\a', '*', '\x2', '\x2', '>', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\a', '+', '\x2', '\x2', '@', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x66', '\x2', '\x2', '\x42', 
		'\x43', '\a', 'g', '\x2', '\x2', '\x43', '\x44', '\a', 'h', '\x2', '\x2', 
		'\x44', '\x45', '\a', 'k', '\x2', '\x2', '\x45', '\x46', '\a', 'p', '\x2', 
		'\x2', '\x46', 'G', '\a', 'g', '\x2', '\x2', 'G', '\x18', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\a', 'k', '\x2', '\x2', 'I', 'J', '\a', 'h', 
		'\x2', '\x2', 'J', '\x1A', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', 
		'y', '\x2', '\x2', 'L', 'M', '\a', 'j', '\x2', '\x2', 'M', 'N', '\a', 
		'k', '\x2', '\x2', 'N', 'O', '\a', 'n', '\x2', '\x2', 'O', 'P', '\a', 
		'g', '\x2', '\x2', 'P', '\x1C', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', 
		'\a', 'u', '\x2', '\x2', 'R', 'S', '\a', 'g', '\x2', '\x2', 'S', 'T', 
		'\a', 'v', '\x2', '\x2', 'T', '\x1E', '\x3', '\x2', '\x2', '\x2', 'U', 
		'V', '\a', '\x64', '\x2', '\x2', 'V', 'W', '\a', 'g', '\x2', '\x2', 'W', 
		'X', '\a', 'i', '\x2', '\x2', 'X', 'Y', '\a', 'k', '\x2', '\x2', 'Y', 
		'Z', '\a', 'p', '\x2', '\x2', 'Z', ' ', '\x3', '\x2', '\x2', '\x2', '[', 
		']', '\t', '\x2', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '_', '\x3', '\x2', '\x2', 
		'\x2', '^', '`', '\t', '\x3', '\x2', '\x2', '_', '^', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\"', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\n', '\x4', '\x2', '\x2', 
		'\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'g', '$', '\x3', '\x2', '\x2', '\x2', 'h', 
		'l', '\a', '=', '\x2', '\x2', 'i', 'k', '\n', '\x5', '\x2', '\x2', 'j', 
		'i', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\b', '\x13', '\x2', '\x2', 'p', '&', '\x3', '\x2', '\x2', '\x2', 
		'q', 's', '\t', '\x6', '\x2', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\b', '\x14', '\x2', '\x2', 'w', '(', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x2', '\\', '\x61', '\x66', 'l', 't', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BasicEvaluatorInterpreter.Parser
